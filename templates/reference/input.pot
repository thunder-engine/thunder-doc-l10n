# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Evgeniy Prikazchikov
# This file is distributed under the same license as the Thunder Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Thunder Engine \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-15 12:05+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../reference/input.rst:3
msgid "Input Class"
msgstr ""

#: ../../reference/input.rst:5
msgid "Inherited: None"
msgstr ""

#: ../../reference/input.rst:9
msgid "Description"
msgstr ""

#: ../../reference/input.rst:11
msgid "The interface to inpust system of Thunder Engine."
msgstr ""

#: ../../reference/input.rst:13
msgid "Use this class to get information from the inpute devices, like mouse, keyboard, joystick and etc."
msgstr ""

#: ../../reference/input.rst:15
msgid "Note: All input data updates once per frame during Engine::update() method."
msgstr ""

#: ../../reference/input.rst:17
msgid "Note: Many mobile devices are capable of tracking multiple fingers touching the screen simultaneously."
msgstr ""

#: ../../reference/input.rst:23
msgid "Public Methods"
msgstr ""

#: ../../reference/input.rst:25
msgid "None"
msgstr ""

#: ../../reference/input.rst:29
msgid "Static Methods"
msgstr ""

#: ../../reference/input.rst:32
#: ../../reference/input.rst:34
#: ../../reference/input.rst:36
#: ../../reference/input.rst:38
#: ../../reference/input.rst:40
#: ../../reference/input.rst:42
msgid ":ref:`bool<api_bool>`"
msgstr ""

#: ../../reference/input.rst:32
msgid ":ref:`isKey<api_Input_isKey>` (Input::KeyCode  code)"
msgstr ""

#: ../../reference/input.rst:34
msgid ":ref:`isKeyDown<api_Input_isKeyDown>` (Input::KeyCode  code)"
msgstr ""

#: ../../reference/input.rst:36
msgid ":ref:`isKeyUp<api_Input_isKeyUp>` (Input::KeyCode  code)"
msgstr ""

#: ../../reference/input.rst:38
msgid ":ref:`isMouseButton<api_Input_isMouseButton>` (Input::MouseButton  button)"
msgstr ""

#: ../../reference/input.rst:40
msgid ":ref:`isMouseButtonDown<api_Input_isMouseButtonDown>` (Input::MouseButton  button)"
msgstr ""

#: ../../reference/input.rst:42
msgid ":ref:`isMouseButtonUp<api_Input_isMouseButtonUp>` (Input::MouseButton  button)"
msgstr ""

#: ../../reference/input.rst:44
#: ../../reference/input.rst:46
#: ../../reference/input.rst:58
#: ../../reference/input.rst:62
msgid ":ref:`int<api_int>`"
msgstr ""

#: ../../reference/input.rst:44
msgid ":ref:`joystickButtons<api_Input_joystickButtons>` (in  int)"
msgstr ""

#: ../../reference/input.rst:46
msgid ":ref:`joystickCount<api_Input_joystickCount>` ()"
msgstr ""

#: ../../reference/input.rst:48
#: ../../reference/input.rst:52
#: ../../reference/input.rst:54
#: ../../reference/input.rst:60
msgid ":ref:`Vector4<api_Vector4>`"
msgstr ""

#: ../../reference/input.rst:48
msgid ":ref:`joystickThumbs<api_Input_joystickThumbs>` (int  index)"
msgstr ""

#: ../../reference/input.rst:50
msgid ":ref:`Vector2<api_Vector2>`"
msgstr ""

#: ../../reference/input.rst:50
msgid ":ref:`joystickTriggers<api_Input_joystickTriggers>` (int  index)"
msgstr ""

#: ../../reference/input.rst:52
msgid ":ref:`mouseDelta<api_Input_mouseDelta>` ()"
msgstr ""

#: ../../reference/input.rst:54
msgid ":ref:`mousePosition<api_Input_mousePosition>` ()"
msgstr ""

#: ../../reference/input.rst:56
msgid ":ref:`void<api_void>`"
msgstr ""

#: ../../reference/input.rst:56
msgid ":ref:`setMousePosition<api_Input_setMousePosition>` (int  x, int  y)"
msgstr ""

#: ../../reference/input.rst:58
msgid ":ref:`touchCount<api_Input_touchCount>` ()"
msgstr ""

#: ../../reference/input.rst:60
msgid ":ref:`touchPosition<api_Input_touchPosition>` (int  index)"
msgstr ""

#: ../../reference/input.rst:62
msgid ":ref:`touchState<api_Input_touchState>` (in  int)"
msgstr ""

#: ../../reference/input.rst:67
msgid "Methods Description"
msgstr ""

#: ../../reference/input.rst:71
msgid ":ref:`bool<api_bool>`  **Input::isKey** (:ref:`Input::KeyCode<api_Input::KeyCode>`  *code*)"
msgstr ""

#: ../../reference/input.rst:73
msgid "Returns true in case of a key with *code* is pressed; otherwise returns false. Please refer to Input::KeyCode to see possible key *code*s."
msgstr ""

#: ../../reference/input.rst:79
msgid ":ref:`bool<api_bool>`  **Input::isKeyDown** (:ref:`Input::KeyCode<api_Input::KeyCode>`  *code*)"
msgstr ""

#: ../../reference/input.rst:81
msgid "Returns true during the frame in case of a key with *code* is pressed; otherwise returns false. Please refer to Input::KeyCode to see possible key *code*s."
msgstr ""

#: ../../reference/input.rst:87
msgid ":ref:`bool<api_bool>`  **Input::isKeyUp** (:ref:`Input::KeyCode<api_Input::KeyCode>`  *code*)"
msgstr ""

#: ../../reference/input.rst:89
msgid "Returns true during the frame in case of a key with *code* is released; otherwise returns false. Please refer to Input::KeyCode to see possible key *code*s."
msgstr ""

#: ../../reference/input.rst:95
msgid ":ref:`bool<api_bool>`  **Input::isMouseButton** (:ref:`Input::MouseButton<api_Input::MouseButton>`  *button*)"
msgstr ""

#: ../../reference/input.rst:97
msgid "Returns the states of mouse *button*s. Please refer to Input::MouseButton to see possible *button*s. Example code:"
msgstr ""

#: ../../reference/input.rst:109
msgid ":ref:`bool<api_bool>`  **Input::isMouseButtonDown** (:ref:`Input::MouseButton<api_Input::MouseButton>`  *button*)"
msgstr ""

#: ../../reference/input.rst:111
msgid "Returns true in case of the *button* is pressed; otherwise returns false. Please refer to Input::MouseButton to see possible *button*s."
msgstr ""

#: ../../reference/input.rst:117
msgid ":ref:`bool<api_bool>`  **Input::isMouseButtonUp** (:ref:`Input::MouseButton<api_Input::MouseButton>`  *button*)"
msgstr ""

#: ../../reference/input.rst:119
msgid "Returns true in case of the *button* is released; otherwise returns false. Please refer to Input::MouseButton to see possible *button*s."
msgstr ""

#: ../../reference/input.rst:125
msgid ":ref:`int<api_int>`  **Input::joystickButtons** (:ref:`in<api_in>`  *int*)"
msgstr ""

#: ../../reference/input.rst:127
msgid "Returns the states of buttons for joystick with index. Please refer to Input::JoystickButton to see possible buttons."
msgstr ""

#: ../../reference/input.rst:129
msgid "**Note:** This method returns a bit masked value. To retrieve the state of the required button please make bit comparison."
msgstr ""

#: ../../reference/input.rst:131
msgid "Example code:"
msgstr ""

#: ../../reference/input.rst:143
msgid ":ref:`int<api_int>`  **Input::joystickCount** ()"
msgstr ""

#: ../../reference/input.rst:145
msgid "Returns the number of connected joysticks."
msgstr ""

#: ../../reference/input.rst:151
msgid ":ref:`Vector4<api_Vector4>`  **Input::joystickThumbs** (:ref:`int<api_int>`  *index*)"
msgstr ""

#: ../../reference/input.rst:153
msgid "Returns the thumbs position of joystick with *index*. The components x and y will contain a value for the left thumbs. The components z and w will contain a value for the right thumbs."
msgstr ""

#: ../../reference/input.rst:159
msgid ":ref:`Vector2<api_Vector2>`  **Input::joystickTriggers** (:ref:`int<api_int>`  *index*)"
msgstr ""

#: ../../reference/input.rst:161
msgid "Returns the value of pressure for the joystick triggers with *index*. The component x will contain a value for the left trigger and component y will contain value for the right trigger."
msgstr ""

#: ../../reference/input.rst:167
msgid ":ref:`Vector4<api_Vector4>`  **Input::mouseDelta** ()"
msgstr ""

#: ../../reference/input.rst:169
msgid "Returns the mouse position delta. The absolute position will be stored in x and y components. The normalized position will be stored in z and w components."
msgstr ""

#: ../../reference/input.rst:171
msgid "**Note:** Delta value recalculated once per frame, calling this method multiple times in one frame will return the same result."
msgstr ""

#: ../../reference/input.rst:173
msgid "**Note:** The value will be Vector4(0.0f) if a mouse is not moved."
msgstr ""

#: ../../reference/input.rst:179
msgid ":ref:`Vector4<api_Vector4>`  **Input::mousePosition** ()"
msgstr ""

#: ../../reference/input.rst:181
msgid "Returns the mouse position. The absolute position will be stored in x and y components. The normalized position will be stored in z and w components."
msgstr ""

#: ../../reference/input.rst:183
msgid "**See also** setMousePosition()."
msgstr ""

#: ../../reference/input.rst:189
msgid ":ref:`void<api_void>`  **Input::setMousePosition** (:ref:`int<api_int>`  *x*, :ref:`int<api_int>`  *y*)"
msgstr ""

#: ../../reference/input.rst:191
msgid "Moves the mouse cursor to the global screen position (x, *y*)."
msgstr ""

#: ../../reference/input.rst:193
msgid "**See also** mousePosition()."
msgstr ""

#: ../../reference/input.rst:199
msgid ":ref:`int<api_int>`  **Input::touchCount** ()"
msgstr ""

#: ../../reference/input.rst:201
msgid "Returns the number of touches."
msgstr ""

#: ../../reference/input.rst:207
msgid ":ref:`Vector4<api_Vector4>`  **Input::touchPosition** (:ref:`int<api_int>`  *index*)"
msgstr ""

#: ../../reference/input.rst:209
msgid "Returns the position of touch with *index*. The absolute position will be stored in x and y components. The normalized position will be stored in z and w components."
msgstr ""

#: ../../reference/input.rst:215
msgid ":ref:`int<api_int>`  **Input::touchState** (:ref:`in<api_in>`  *int*)"
msgstr ""

#: ../../reference/input.rst:217
msgid "Returns the state of touch with index. Please refer to Input::TouchState to see possible states."
msgstr ""
