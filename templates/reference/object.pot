# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Evgeniy Prikazchikov
# This file is distributed under the same license as the Thunder Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Thunder Engine \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-15 12:05+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../reference/object.rst:3
msgid "Object Class"
msgstr ""

#: ../../reference/object.rst:5
msgid "Inherited: None"
msgstr ""

#: ../../reference/object.rst:9
msgid "Description"
msgstr ""

#: ../../reference/object.rst:11
msgid "The Object class is the base calss for all object classes."
msgstr ""

#: ../../reference/object.rst:13
msgid "The object is the central part of the Next library. For communication between objects two mechanisms was implemented the signals and slots also event based approach. To connect two objects between use connect() method and the sender object will notify the receiver object about necessary events."
msgstr ""

#: ../../reference/object.rst:15
msgid "Objects can be organized into an object trees. Each object can have an unlimited number of children objects. When you assign parent to an object it automatically add itself to the parent children list. Parent object takes ownership of the child object. This means that the child will be automatically deleted if the parent object is deleted. Child object can be found in hierarchy of objects by path or by the type using find(), findChild() or findChildren()."
msgstr ""

#: ../../reference/object.rst:17
msgid "Each Object has name() and this name must be unique in space of object level in hierarchy i.e. parent with name \"House\" can't has two childs with name \"Roof\". This names is used to reach objects by its paths land.find(\"House/Roof\") will return \"Roof\" object."
msgstr ""

#: ../../reference/object.rst:19
msgid "Each Object has MetaObject declaration. MetaObject system can be used to declare and retrieve structure of object at runtime."
msgstr ""

#: ../../reference/object.rst:21
msgid "Based on Actor model the object can't be copied only clone()."
msgstr ""

#: ../../reference/object.rst:27
msgid "Public Methods"
msgstr ""

#: ../../reference/object.rst:30
msgid ":ref:`Object<api_Object_Object>` ()"
msgstr ""

#: ../../reference/object.rst:32
msgid ":ref:`~Object<api_Object_~Object>` ()"
msgstr ""

#: ../../reference/object.rst:34
#: ../../reference/object.rst:40
#: ../../reference/object.rst:42
#: ../../reference/object.rst:58
#: ../../reference/object.rst:60
#: ../../reference/object.rst:68
#: ../../reference/object.rst:72
#: ../../reference/object.rst:80
#: ../../reference/object.rst:82
#: ../../reference/object.rst:84
#: ../../reference/object.rst:106
msgid ":ref:`void<api_void>`"
msgstr ""

#: ../../reference/object.rst:34
msgid ":ref:`addChild<api_Object_addChild>` (Object * child)"
msgstr ""

#: ../../reference/object.rst:36
#: ../../reference/object.rst:46
#: ../../reference/object.rst:66
#: ../../reference/object.rst:78
#: ../../reference/object.rst:104
msgid ":ref:`Object<api_Object>` *"
msgstr ""

#: ../../reference/object.rst:36
msgid ":ref:`clone<api_Object_clone>` ()"
msgstr ""

#: ../../reference/object.rst:38
#: ../../reference/object.rst:50
#: ../../reference/object.rst:64
#: ../../reference/object.rst:88
#: ../../reference/object.rst:90
msgid ":ref:`int<api_int>`"
msgstr ""

#: ../../reference/object.rst:38
msgid ":ref:`clonedFrom<api_Object_clonedFrom>` () const"
msgstr ""

#: ../../reference/object.rst:40
msgid ":ref:`deleteLater<api_Object_deleteLater>` ()"
msgstr ""

#: ../../reference/object.rst:42
msgid ":ref:`emitSignal<api_Object_emitSignal>` (const char * signal, const Variant & args = Variant())"
msgstr ""

#: ../../reference/object.rst:44
#: ../../reference/object.rst:56
#: ../../reference/object.rst:92
#: ../../reference/object.rst:94
#: ../../reference/object.rst:102
msgid ":ref:`bool<api_bool>`"
msgstr ""

#: ../../reference/object.rst:44
msgid ":ref:`event<api_Object_event>` (Event * event)"
msgstr ""

#: ../../reference/object.rst:46
msgid ":ref:`find<api_Object_find>` (const int & path)"
msgstr ""

#: ../../reference/object.rst:48
msgid ":ref:`T<api_T>`"
msgstr ""

#: ../../reference/object.rst:48
msgid ":ref:`findChild<api_Object_findChild>` (bool  recursive = true)"
msgstr ""

#: ../../reference/object.rst:50
msgid ":ref:`findChildren<api_Object_findChildren>` (boo  bool)"
msgstr ""

#: ../../reference/object.rst:52
msgid ":ref:`const Object::ObjectList<api_const Object::ObjectList>` &"
msgstr ""

#: ../../reference/object.rst:52
msgid ":ref:`getChildren<api_Object_getChildren>` () const"
msgstr ""

#: ../../reference/object.rst:54
msgid ":ref:`const Object::LinkList<api_const Object::LinkList>` &"
msgstr ""

#: ../../reference/object.rst:54
msgid ":ref:`getReceivers<api_Object_getReceivers>` () const"
msgstr ""

#: ../../reference/object.rst:56
msgid ":ref:`isSerializable<api_Object_isSerializable>` () const"
msgstr ""

#: ../../reference/object.rst:58
msgid ":ref:`loadData<api_Object_loadData>` (const VariantList & data)"
msgstr ""

#: ../../reference/object.rst:60
msgid ":ref:`loadUserData<api_Object_loadUserData>` (const VariantMap & data)"
msgstr ""

#: ../../reference/object.rst:62
#: ../../reference/object.rst:108
msgid ":ref:`const MetaObject<api_const MetaObject>` *"
msgstr ""

#: ../../reference/object.rst:62
msgid ":ref:`metaObject<api_Object_metaObject>` () const"
msgstr ""

#: ../../reference/object.rst:64
msgid ":ref:`name<api_Object_name>` () const"
msgstr ""

#: ../../reference/object.rst:66
msgid ":ref:`parent<api_Object_parent>` () const"
msgstr ""

#: ../../reference/object.rst:68
msgid ":ref:`postEvent<api_Object_postEvent>` (Event * event)"
msgstr ""

#: ../../reference/object.rst:70
msgid ":ref:`Variant<api_Variant>`"
msgstr ""

#: ../../reference/object.rst:70
msgid ":ref:`property<api_Object_property>` (const char * name) const"
msgstr ""

#: ../../reference/object.rst:72
msgid ":ref:`removeChild<api_Object_removeChild>` (Object * child)"
msgstr ""

#: ../../reference/object.rst:74
msgid ":ref:`VariantList<api_VariantList>`"
msgstr ""

#: ../../reference/object.rst:74
msgid ":ref:`saveData<api_Object_saveData>` () const"
msgstr ""

#: ../../reference/object.rst:76
msgid ":ref:`VariantMap<api_VariantMap>`"
msgstr ""

#: ../../reference/object.rst:76
msgid ":ref:`saveUserData<api_Object_saveUserData>` () const"
msgstr ""

#: ../../reference/object.rst:78
msgid ":ref:`sender<api_Object_sender>` () const"
msgstr ""

#: ../../reference/object.rst:80
msgid ":ref:`setName<api_Object_setName>` (const int & name)"
msgstr ""

#: ../../reference/object.rst:82
msgid ":ref:`setParent<api_Object_setParent>` (Object * parent)"
msgstr ""

#: ../../reference/object.rst:84
msgid ":ref:`setProperty<api_Object_setProperty>` (const char * name, const Variant & value)"
msgstr ""

#: ../../reference/object.rst:86
msgid ":ref:`ObjectSystem<api_ObjectSystem>` *"
msgstr ""

#: ../../reference/object.rst:86
msgid ":ref:`system<api_Object_system>` () const"
msgstr ""

#: ../../reference/object.rst:88
msgid ":ref:`typeName<api_Object_typeName>` () const"
msgstr ""

#: ../../reference/object.rst:90
msgid ":ref:`uuid<api_Object_uuid>` () const"
msgstr ""

#: ../../reference/object.rst:92
msgid ":ref:`operator!=<api_Object_operator!=>` (const Object & ) const"
msgstr ""

#: ../../reference/object.rst:94
msgid ":ref:`operator==<api_Object_operator==>` (const Object & ) const"
msgstr ""

#: ../../reference/object.rst:99
msgid "Static Methods"
msgstr ""

#: ../../reference/object.rst:102
msgid ":ref:`connect<api_Object_connect>` (Object * sender, const char * signal, Object * receiver, const char * method)"
msgstr ""

#: ../../reference/object.rst:104
msgid ":ref:`construct<api_Object_construct>` ()"
msgstr ""

#: ../../reference/object.rst:106
msgid ":ref:`disconnect<api_Object_disconnect>` (Object * sender, const char * signal, Object * receiver, const char * method)"
msgstr ""

#: ../../reference/object.rst:108
msgid ":ref:`metaClass<api_Object_metaClass>` ()"
msgstr ""

#: ../../reference/object.rst:113
msgid "Methods Description"
msgstr ""

#: ../../reference/object.rst:117
msgid "**Object::Object** ()"
msgstr ""

#: ../../reference/object.rst:119
msgid "Constructs an object."
msgstr ""

#: ../../reference/object.rst:121
msgid "By default Object create without parent to assign the parent object use setParent()."
msgstr ""

#: ../../reference/object.rst:127
msgid "**Object::~Object** ()"
msgstr ""

#: ../../reference/object.rst:129
msgid "Destroys the instance of Object. The destructor is virtual."
msgstr ""

#: ../../reference/object.rst:135
msgid ":ref:`void<api_void>`  **Object::addChild** (:ref:`Object<api_Object>` * *child*)"
msgstr ""

#: ../../reference/object.rst:137
msgid "Pushes a *child* object to the internal list of *child*ren."
msgstr ""

#: ../../reference/object.rst:143
msgid ":ref:`Object<api_Object>` * **Object::clone** ()"
msgstr ""

#: ../../reference/object.rst:145
msgid "Clones this object. Returns pointer to clone object."
msgstr ""

#: ../../reference/object.rst:147
msgid "When you clone the Object or subclasses of it, all child objects also will be cloned. By default the parent for the new object will be nullptr. This clone will not have the name so you will need to set it manualy if required."
msgstr ""

#: ../../reference/object.rst:149
msgid "Connections will be recreated with the same objects as original."
msgstr ""

#: ../../reference/object.rst:151
#: ../../reference/object.rst:255
#: ../../reference/object.rst:269
msgid "**See also** connect()."
msgstr ""

#: ../../reference/object.rst:157
msgid ":ref:`int<api_int>`  **Object::clonedFrom** () const"
msgstr ""

#: ../../reference/object.rst:159
msgid "Returns the UUID of cloned object."
msgstr ""

#: ../../reference/object.rst:165
msgid ":ref:`bool<api_bool>`  **Object::connect** (:ref:`Object<api_Object>` * *sender*, :ref:`char<api_char>` * *signal*, :ref:`Object<api_Object>` * *receiver*, :ref:`char<api_char>` * *method*)"
msgstr ""

#: ../../reference/object.rst:167
msgid "Creates connection beteen the *signal* of the *sender* and the *method* of the *receiver*. Returns true if successful; otherwise returns false."
msgstr ""

#: ../../reference/object.rst:169
msgid "You must use the _SIGNAL() and _SLOT() macros when specifying *signal* and the *method*."
msgstr ""

#: ../../reference/object.rst:171
msgid "**Note:** The _SIGNAL() and _SLOT() must not contain any parameter values only parameter types."
msgstr ""

#: ../../reference/object.rst:196
msgid "**Note:** Mehod *signal* in MyObject class may not have the implementation. It used only in description purposes in A_SIGNAL(signal) macros."
msgstr ""

#: ../../reference/object.rst:198
msgid "Signal can also be conected to another *signal*."
msgstr ""

#: ../../reference/object.rst:211
msgid ":ref:`Object<api_Object>` * **Object::construct** ()"
msgstr ""

#: ../../reference/object.rst:213
msgid "Returns new instance of Object class. This method is used in MetaObject system."
msgstr ""

#: ../../reference/object.rst:215
#: ../../reference/object.rst:363
#: ../../reference/object.rst:373
msgid "**See also** MetaObject."
msgstr ""

#: ../../reference/object.rst:221
msgid ":ref:`void<api_void>`  **Object::deleteLater** ()"
msgstr ""

#: ../../reference/object.rst:223
msgid "Marks this object to be deleted. This object will be deleted when event loop will call processEvent() method for this object."
msgstr ""

#: ../../reference/object.rst:229
msgid ":ref:`void<api_void>`  **Object::disconnect** (:ref:`Object<api_Object>` * *sender*, :ref:`char<api_char>` * *signal*, :ref:`Object<api_Object>` * *receiver*, :ref:`char<api_char>` * *method*)"
msgstr ""

#: ../../reference/object.rst:231
msgid "Disconnects *signal* in object *sender* from *method* in object *receiver*."
msgstr ""

#: ../../reference/object.rst:233
msgid "A connection is removed when either of the objects are destroyed."
msgstr ""

#: ../../reference/object.rst:235
msgid "disconnect() can be used in three ways:"
msgstr ""

#: ../../reference/object.rst:237
msgid "Disconnect everything from a specific *sender*..."
msgstr ""

#: ../../reference/object.rst:243
msgid "Disconnect everything connected to a specific *signal*..."
msgstr ""

#: ../../reference/object.rst:249
msgid "Disconnect all connections from the *receiver*..."
msgstr ""

#: ../../reference/object.rst:261
msgid ":ref:`void<api_void>`  **Object::emitSignal** (:ref:`char<api_char>` * *signal*, :ref:`Variant<api_Variant>` & *args* = Variant())"
msgstr ""

#: ../../reference/object.rst:263
msgid "Send specific *signal* with *args* for all connected receivers."
msgstr ""

#: ../../reference/object.rst:265
msgid "For now it places *signal* directly to receivers queues. In case of another *signal* connected as method this *signal* will be emitted immediately."
msgstr ""

#: ../../reference/object.rst:267
msgid "**Note:** Receiver should be in event loop to process incoming message."
msgstr ""

#: ../../reference/object.rst:275
msgid ":ref:`bool<api_bool>`  **Object::event** (:ref:`Event<api_Event>` * *event*)"
msgstr ""

#: ../../reference/object.rst:277
msgid "Abstract *event* handler. Developers should reimplement this method to handle *event*s manually. Returns true in case of *event* was handled otherwise return false."
msgstr ""

#: ../../reference/object.rst:283
msgid ":ref:`Object<api_Object>` * **Object::find** (:ref:`int<api_int>` & *path*)"
msgstr ""

#: ../../reference/object.rst:285
msgid "Returns an object located along the *path*."
msgstr ""

#: ../../reference/object.rst:299
msgid "Returns nullptr if no such object."
msgstr ""

#: ../../reference/object.rst:301
msgid "**See also** findChild()."
msgstr ""

#: ../../reference/object.rst:307
msgid ":ref:`T<api_T>`  **Object::findChild** (:ref:`bool<api_bool>`  *recursive* = true)"
msgstr ""

#: ../../reference/object.rst:313
msgid ":ref:`int<api_int>`  **Object::findChildren** (:ref:`boo<api_boo>`  *bool*)"
msgstr ""

#: ../../reference/object.rst:319
msgid ":ref:`const Object::ObjectList<api_const Object::ObjectList>` & **Object::getChildren** () const"
msgstr ""

#: ../../reference/object.rst:321
msgid "Returns list of child objects for this object."
msgstr ""

#: ../../reference/object.rst:327
msgid ":ref:`const Object::LinkList<api_const Object::LinkList>` & **Object::getReceivers** () const"
msgstr ""

#: ../../reference/object.rst:329
msgid "Returns list of links to receivers objects for this object."
msgstr ""

#: ../../reference/object.rst:335
msgid ":ref:`bool<api_bool>`  **Object::isSerializable** () const"
msgstr ""

#: ../../reference/object.rst:337
msgid "Returns true if the object can be serialized; otherwise returns false."
msgstr ""

#: ../../reference/object.rst:343
msgid ":ref:`void<api_void>`  **Object::loadData** (:ref:`VariantList<api_VariantList>` & *data*)"
msgstr ""

#: ../../reference/object.rst:345
msgid "This method allows to DESERIALIZE *data* of object like properties, connections and user *data*."
msgstr ""

#: ../../reference/object.rst:351
msgid ":ref:`void<api_void>`  **Object::loadUserData** (:ref:`VariantMap<api_VariantMap>` & *data*)"
msgstr ""

#: ../../reference/object.rst:353
msgid "This method allows to DESERIALIZE *data* which not present as A_PROPERTY() in object."
msgstr ""

#: ../../reference/object.rst:359
msgid ":ref:`const MetaObject<api_const MetaObject>` * **Object::metaClass** ()"
msgstr ""

#: ../../reference/object.rst:361
msgid "Returns MetaObject and can be invoke without object of current class. This method is used in MetaObject system."
msgstr ""

#: ../../reference/object.rst:369
msgid ":ref:`const MetaObject<api_const MetaObject>` * **Object::metaObject** () const"
msgstr ""

#: ../../reference/object.rst:371
msgid "Returns ponter MetaObject of this object. This method is used in MetaObject system."
msgstr ""

#: ../../reference/object.rst:379
msgid ":ref:`int<api_int>`  **Object::name** () const"
msgstr ""

#: ../../reference/object.rst:381
msgid "Returns name of the object."
msgstr ""

#: ../../reference/object.rst:383
msgid "**See also** setName()."
msgstr ""

#: ../../reference/object.rst:389
msgid ":ref:`Object<api_Object>` * **Object::parent** () const"
msgstr ""

#: ../../reference/object.rst:391
msgid "Returns a pointer to the parent object."
msgstr ""

#: ../../reference/object.rst:393
msgid "**See also** setParent()."
msgstr ""

#: ../../reference/object.rst:399
msgid ":ref:`void<api_void>`  **Object::postEvent** (:ref:`Event<api_Event>` * *event*)"
msgstr ""

#: ../../reference/object.rst:401
msgid "Place *event* to internal *event* queue to be processed in *event* loop."
msgstr ""

#: ../../reference/object.rst:407
msgid ":ref:`Variant<api_Variant>`  **Object::property** (:ref:`char<api_char>` * *name*) const"
msgstr ""

#: ../../reference/object.rst:409
msgid "Returns the value of the object's property by *name*."
msgstr ""

#: ../../reference/object.rst:411
msgid "If property not found returns invalid Variant. Information of all properties which provided by this object can be found in MetaObject."
msgstr ""

#: ../../reference/object.rst:413
msgid "**See also** setProperty(), metaObject(), and Variant::isValid()."
msgstr ""

#: ../../reference/object.rst:419
msgid ":ref:`void<api_void>`  **Object::removeChild** (:ref:`Object<api_Object>` * *child*)"
msgstr ""

#: ../../reference/object.rst:421
msgid "Removes a *child* object from the internal list of *child*ren."
msgstr ""

#: ../../reference/object.rst:427
msgid ":ref:`VariantList<api_VariantList>`  **Object::saveData** () const"
msgstr ""

#: ../../reference/object.rst:429
msgid "This method allows to SERIALIZE all object data like properties connections and user data. Returns serialized data as VariantList."
msgstr ""

#: ../../reference/object.rst:435
msgid ":ref:`VariantMap<api_VariantMap>`  **Object::saveUserData** () const"
msgstr ""

#: ../../reference/object.rst:437
msgid "This method allows to SERIALIZE data which not present as A_PROPERTY() in object. Returns serialized data as VariantMap."
msgstr ""

#: ../../reference/object.rst:443
msgid ":ref:`Object<api_Object>` * **Object::sender** () const"
msgstr ""

#: ../../reference/object.rst:445
msgid "Returns object which sent signal."
msgstr ""

#: ../../reference/object.rst:447
msgid "**Note:** This method returns a valid object only in receiver slot otherwise it's return nullptr"
msgstr ""

#: ../../reference/object.rst:453
msgid ":ref:`void<api_void>`  **Object::setName** (:ref:`int<api_int>` & *name*)"
msgstr ""

#: ../../reference/object.rst:455
msgid "Set object *name* by provided *name*."
msgstr ""

#: ../../reference/object.rst:457
msgid "**See also** *name*() and metaObject()."
msgstr ""

#: ../../reference/object.rst:463
msgid ":ref:`void<api_void>`  **Object::setParent** (:ref:`Object<api_Object>` * *parent*)"
msgstr ""

#: ../../reference/object.rst:465
msgid "Makes the object a child of *parent*."
msgstr ""

#: ../../reference/object.rst:467
msgid "**See also** *parent*()."
msgstr ""

#: ../../reference/object.rst:473
msgid ":ref:`void<api_void>`  **Object::setProperty** (:ref:`char<api_char>` * *name*, :ref:`Variant<api_Variant>` & *value*)"
msgstr ""

#: ../../reference/object.rst:475
msgid "Sets the property with *name* to *value*."
msgstr ""

#: ../../reference/object.rst:477
msgid "If property not found do nothing. Property must be defined as A_PROPERTY(). Information of all properties which provided by this object can be found in MetaObject."
msgstr ""

#: ../../reference/object.rst:479
msgid "**See also** property(), metaObject(), and Variant::isValid()."
msgstr ""

#: ../../reference/object.rst:485
msgid ":ref:`ObjectSystem<api_ObjectSystem>` * **Object::system** () const"
msgstr ""

#: ../../reference/object.rst:487
msgid "Returns System which handles this object."
msgstr ""

#: ../../reference/object.rst:493
msgid ":ref:`int<api_int>`  **Object::typeName** () const"
msgstr ""

#: ../../reference/object.rst:495
msgid "Returns class name the object."
msgstr ""

#: ../../reference/object.rst:501
msgid ":ref:`int<api_int>`  **Object::uuid** () const"
msgstr ""

#: ../../reference/object.rst:503
msgid "Returns unique ID of the object."
msgstr ""

#: ../../reference/object.rst:509
msgid ":ref:`bool<api_bool>`  **Object::operator!=** (:ref:`Object<api_Object>` & **) const"
msgstr ""

#: ../../reference/object.rst:515
msgid ":ref:`bool<api_bool>`  **Object::operator==** (:ref:`Object<api_Object>` & **) const"
msgstr ""
